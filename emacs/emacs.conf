;;; package --- Summary
;;; Commentary:
;;; Code:

(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(global-auto-revert-mode +1)

(setq global-auto-revert-non-file-buffers t)

(tool-bar-mode -1)

(menu-bar-mode -1)

(scroll-bar-mode -1)

(global-hl-line-mode +1)

(setq column-number-mode t)

(delete-selection-mode +1)

(setq make-backup-files nil)

(setq create-lockfiles nil)

(global-display-line-numbers-mode)

(show-paren-mode 1)

(setq auto-save-default nil)

(use-package doom-themes
  :ensure t
  :config
    (load-theme 'doom-1337 t))

(use-package doom-modeline
  :ensure t
  :config
  (setq doom-modeline-height 30
    doom-modeline-bar-width 10)
  :hook
    (after-init . doom-modeline-mode))

(use-package all-the-icons
  :ensure t)

(use-package org-bullets
  :ensure t
  :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

(setq org-support-shift-select t)

(add-to-list 'load-path "~/path/to/org-present")
(autoload 'org-present "org-present" nil t)
(eval-after-load "org-present"
  '(progn
     (add-hook 'org-present-mode-hook
               (lambda ()
                 (org-present-big)
                 (org-display-inline-images)
                 (org-present-hide-cursor)
                 (org-present-read-only)))
     (add-hook 'org-present-mode-quit-hook
               (lambda ()
                 (org-present-small)
                 (org-remove-inline-images)
                 (org-present-show-cursor)
                 (org-present-read-write)))))

;; (setq ido-everywhere t)
;; (setq ido-enable-flex-matching t)
;; (ido-mode t)

(use-package markdown-mode
  :ensure t
  :mode ("README\\.md\\'" . gfm-mode)
  :init (setq markdown-command "/usr/bin/pandoc"))
  (add-hook 'gfm-mode 'markdow-live-preview-mode)

(use-package which-key
  :ensure t
  :config
    (which-key-mode))

(use-package projectile
  :ensure t
  :config
    (projectile-mode +1)
    (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map))

(use-package dashboard
  :ensure t
  :init
    (progn
      (setq dashboard-items '((recents . 4) (projects . 4))) ;;; (bookmarks . 5)
      (setq dashboard-show-shortcuts t)
      (setq dashboard-banner-logo-title "Welcome WardenCode to Emacs")
      (setq dashboard-set-file-icons t) ;; Icons on files
      (setq dashboard-set-heading-icons t) ;; Icons on recent and projects
      (setq dashboard-startup-banner "~/Pictures/profile/rounded-profile-240px.png")
      ;; Logo
      ;; below here is new
      (setq dashboard-set-navigator t)
      ;;Format: "(icon title help action face prefix suffix)"
      (setq dashboard-navigator-button
        `(;; line1
          ((,nil
          "init file"
          "Open init file"
            (lambda (&rest _) (find-file "~/.emacs/my-config.el")))
            ))))
   :config
   (dashboard-setup-startup-hook))

(use-package rainbow-delimiters
  :ensure t)
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
  (add-hook 'org-mode-hook #'rainbow-delimiters-mode)

(use-package smartparens
       :ensure t)
       (require 'smartparens-config)
       (smartparens-global-mode)
;;;       (add-hook 'org-mode-hook #'smartparens-mode)
;;;       (add-hook 'lisp-mode-hook #'smartparens)
;;;       (add-hook 'c-mode-hook #'smartparens)
;;;       (add-hook 'python-mode-hook #'smartparens)
;;;       (add-hook 'ruby-mode-hook #'smartparens)
;;;       (add-hook 'web-mode-hook #'smartparens)
;;;       (add-hook 'json-mode-hook #'smartparens)
;;;       (add-hook 'rjsx-mode-hook #'smartparens)


(use-package treemacs
  :ensure t
  :bind
  (:map global-map
    ([f8] . treemacs)
    ("C-<f8>" . treemacs-select-window))
  :config
  (setq treemacs-is-never-other-window t))

(use-package treemacs-projectile
  :after treemacs projectile
  :ensure t)

(use-package expand-region
  :ensure t
  :bind
    ("M-+" . er/expand-region)
    ("M--" . er/contract-region))


(use-package company-box
  :hook (company-mode . company-box-mode))

(use-package flycheck
  :ensure t
  :init
    (global-flycheck-mode))

(setq-default tab-width 2)
(setq indent-tabs-mode nil)
(defun WardenCode/webmode-hook ()
  "Webmode hooks."
    (setq web-mode-enable-comment-annotation t)
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-attr-indent-offset 0)
    (setq web-mode-enable-auto-indentation t)
    (setq web-mode-enable-auto-closing t)
    (setq web-mode-enable-auto-pairing t)
    (setq web-mode-enable-css-colorization t))

(use-package web-mode
  :ensure t
  :mode
    (("\\.js\\'" . web-mode)
      ("\\.jsx\\'" . web-mode)
      ("\\.ts\\'" . web-mode)
      ("\\.tsx\\'" . web-mode)
      ("\\.html\\'" . web-mode))
  :commands web-mode
  :hook
    (web-mode . WardenCode/webmode-hook))

(use-package magit
  :ensure t
  :bind
    (("C-x g" . magit-status)))

(use-package rjsx-mode
  :ensure t
  :mode "\\.js\\'")

(defun setup-tide-mode()
    "Setup function for tide."
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (tide-hl-identifier-mode +1)
    (company-mode +1))

  (use-package tide
    :ensure t
    :after
      (rjsx-mode company flycheck)
    :hook
      (rjsx-mode . setup-tide-mode))

(use-package prettier-js
  :ensure t
  :after
    (rjsx-mode)
  :hook
    (rjsx-mode . prettier-js-mode))

(setq-local python-indent-offset 4)

(use-package json-mode
  :ensure t
  :mode "\\.json\\'")

(setq-local css-indent-offset 2)

(setq c-default-style "bsd"
  c-basic-offset 8
  tab-width 8
  indent-tabs-mode t)

(require 'whitespace)
(setq whitespace-style '(face empty lines-tail trailing))
(add-hook 'c-mode-hook 'whitespace-mode)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(c-default-style "bsd")
 '(inhibit-startup-screen t)
 '(package-archives
   '(("melpa" . "https://melpa.org/packages/")
     ("gnu" . "https://elpa.gnu.org/packages/")))
 '(package-selected-packages
   '(## web-search smartparens org-present rainbow-delimiters-mode rainbow-delimiters markdown-mode evil crdt eglot treemacs lsp-ui lsp-mode magit web-mode which-key use-package doom-modeline doom-themes json-snatcher json-mode prettier-js tide rjsx-mode company org-bullets expand-region wakatime-mode treemacs-projectile popup page-break-lines dashboard async))
 '(standard-indent 2)
 '(tab-width 8))

(provide '.emacs)
;;; .emacs ends here
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;; Instalar straight.el
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

;; Configurar straight.el
(straight-use-package 'use-package)

;; Copilot

(use-package copilot
  :straight (:host github :repo "zerolfx/copilot.el" :files ("dist" "*.el"))
  :ensure t)
;; you can utilize :map :hook and :config to customize copilot

(add-hook 'prog-mode-hook 'copilot-mode)

(define-key copilot-completion-map (kbd "<tab>") 'copilot-accept-completion)
(define-key copilot-completion-map (kbd "TAB") 'copilot-accept-completion)
